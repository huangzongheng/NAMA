# encoding: utf-8
"""
@author:  liaoxingyu
@contact: liaoxingyu2@jd.com
"""

import glob
import re
import urllib
import zipfile
import os
import numpy as np
import mat4py

import os.path as osp

from utils.iotools import mkdir_if_missing
from .bases import BaseImageDataset

# attributes
# ['backpack',
#  'bag',
#  'boots',
#  'downblack',
#  'downblue',
#  'downbrown',
#  'downgray',
#  'downgreen',
#  'downred',
#  'downwhite',
#  'gender',
#  'handbag',
#  'hat',
#  'shoes',
#  'top',
#  'upblack',
#  'upblue',
#  'upbrown',
#  'upgray',
#  'upgreen',
#  'uppurple',
#  'upred',
#  'upwhite']
s='''0034_c1_f0057636.jpg,  (4,4)
0061_c1_f0062281.jpg,  (3,4)
0043_c1_f0059677.jpg,  (4,3)
0046_c1_f0060037.jpg,  (4,6)
0053_c1_f0060659.jpg,  (5,6)
0140_c8_f0141968.jpg,  (3,3)
0167_c1_f0084519.jpg,  (5,3)
0174_c2_f0090920.jpg,  (5,3)
0183_c7_f0069034.jpg,  (4,4)
0188_c1_f0087974.jpg,  (3,4)
0244_c6_f0073324.jpg,  (2,4)
0247_c1_f0095658.jpg,  (3,4)
0272_c1_f0097338.jpg,  (4,4)
0300_c7_f0091101.jpg,  (8,4)
0341_c1_f0106021.jpg,  (1,4)
0390_c1_f0111618.jpg,  (4,4)
0468_c1_f0125465.jpg,  (3,4)
0482_c1_f0127523.jpg,  (6,3)
0543_c1_f0141101.jpg,  (3,3)
0581_c4_f0132958.jpg,  (6,4)'''
# hard_query = dict([(i.split(',  ')) for i in s.split('\n')])
# for k in hard_query.keys():
#     hard_query[k] = ([int(i) for i in hard_query[k][1::2]])

from data.datasets.get_focus_label import get_focus_label
# hard_query = get_focus_label()[0]

class DukeMTMCreID(BaseImageDataset):
    """
    DukeMTMC-reID
    Reference:
    1. Ristani et al. Performance Measures and a Data Set for Multi-Target, Multi-Camera Tracking. ECCVW 2016.
    2. Zheng et al. Unlabeled Samples Generated by GAN Improve the Person Re-identification Baseline in vitro. ICCV 2017.
    URL: https://github.com/layumi/DukeMTMC-reID_evaluation

    Dataset statistics:
    # identities: 1404 (train + query)
    # images:16522 (train) + 2228 (query) + 17661 (gallery)
    # cameras: 8
    """
    dataset_dir = 'DukeMTMC-reID'
    train_folder = 'bounding_box_train'
    query_folder = 'query'
    gallery_folder = 'bounding_box_test'

    def __init__(self, root='/home/haoluo/data', verbose=True, use_attr=False, **kwargs):
        super(DukeMTMCreID, self).__init__()
        self.dataset_dir = osp.join(root, self.dataset_dir)
        self.dataset_url = 'http://vision.cs.duke.edu/DukeMTMC/data/misc/DukeMTMC-reID.zip'
        self.train_dir = osp.join(self.dataset_dir, self.train_folder)
        self.query_dir = osp.join(self.dataset_dir, self.query_folder)
        self.gallery_dir = osp.join(self.dataset_dir, self.gallery_folder)

        self._download_data()
        self._check_before_run()

        train = self._process_dir(self.train_dir, relabel=True)
        query = self._process_dir(self.query_dir, relabel=False)
        gallery = self._process_dir(self.gallery_dir, relabel=False)

        if verbose:
            print("=> DukeMTMC-reID loaded")
            self.print_dataset_statistics(train, query, gallery)

        # 使用我标注的100个hard query
        # query = list(filter(lambda x: x[0].split('/')[-1] in hard_query, query))
        # query = list(filter(lambda x: x[0].split('/')[-1] in hard_query.keys(), query))

        self.train = train
        self.query = query
        self.gallery = gallery  # [::1]

        self.num_train_pids, self.num_train_imgs, self.num_train_cams = self.get_imagedata_info(self.train)
        self.num_query_pids, self.num_query_imgs, self.num_query_cams = self.get_imagedata_info(self.query)
        self.num_gallery_pids, self.num_gallery_imgs, self.num_gallery_cams = self.get_imagedata_info(self.gallery)
        if use_attr:
            attrs = mat4py.loadmat(os.path.join(self.dataset_dir,'attribute','duke_attribute.mat'))['duke_attribute']
            attr_train = attrs['train']
            attr_test = attrs['test']

            cls = set(attr_train.keys())
            cls.discard('image_index')
            cls = list(cls)
            cls.sort()

            c = np.zeros((len(attr_train['image_index']), len(cls)+1))    # +1 for id label
            for i in range(len(cls)):
                c[:, i] = attr_train[cls[i]]
            c[:, -1] = np.arange(c.shape[0]) + 1
            self.train_attr = np.clip(c.astype(np.int64) - 1, 0, 100000)
            self.classes_attr = cls
            self.train = [[i[0], i[1], self.train_attr[i[1]]] for i in self.train]

            # cls = set(attr_test.keys())
            # cls.discard('image_index')
            # cls = list(cls)
            # cls.sort()
            # c = np.zeros((len(attr_test['image_index']), len(cls)))    # +1 for id label
            # for i in range(len(cls)):
            #     c[:, i] = attr_test[cls[i]]
            # self.test_attr = np.clip(c.astype(np.int64) - 1, 0, 100000)
            # self.classes_attr = cls
            # self.query = [[i[0], i[1], i[2], self.test_attr[i[1]]] for i in self.query]
            # self.gallery = [[i[0], i[1], i[2], self.test_attr[i[1]]] for i in self.gallery]

    def _download_data(self):
        if osp.exists(self.dataset_dir):
            print("This dataset has been downloaded.")
            return

        print("Creating directory {}".format(self.dataset_dir))
        mkdir_if_missing(self.dataset_dir)
        fpath = osp.join(self.dataset_dir, osp.basename(self.dataset_url))

        print("Downloading DukeMTMC-reID dataset")
        urllib.request.urlretrieve(self.dataset_url, fpath)

        print("Extracting files")
        zip_ref = zipfile.ZipFile(fpath, 'r')
        zip_ref.extractall(self.dataset_dir)
        zip_ref.close()

    def _check_before_run(self):
        """Check if all files are available before going deeper"""
        if not osp.exists(self.dataset_dir):
            raise RuntimeError("'{}' is not available".format(self.dataset_dir))
        if not osp.exists(self.train_dir):
            raise RuntimeError("'{}' is not available".format(self.train_dir))
        if not osp.exists(self.query_dir):
            raise RuntimeError("'{}' is not available".format(self.query_dir))
        if not osp.exists(self.gallery_dir):
            raise RuntimeError("'{}' is not available".format(self.gallery_dir))

    def _process_dir(self, dir_path, relabel=False):
        img_paths = glob.glob(osp.join(dir_path, '*.jpg'))
        pattern = re.compile(r'([-\d]+)_c(\d)')

        pid_container = set()
        for img_path in img_paths:
            pid, _ = map(int, pattern.search(img_path).groups())
            pid_container.add(pid)
        pid2label = {pid: label for label, pid in enumerate(pid_container)}

        dataset = []
        for img_path in img_paths:
            pid, camid = map(int, pattern.search(img_path).groups())
            assert 1 <= camid <= 8
            camid -= 1  # index starts from 0
            if relabel: pid = pid2label[pid]
            dataset.append((img_path, pid, camid))

        return dataset


class DukeMTMCreIDPartial(DukeMTMCreID):
    dataset_dir = 'DukeMTMC-reIDPartial'

class DukeMTMCreIDMIXq(DukeMTMCreID):
    query_folder = 'hl_query'
    gallery_folder = 'hl_bounding_box_test'
